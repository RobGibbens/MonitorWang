<?xml version="1.0" encoding="utf-8"?>

<configuration>
  <components>
    <!-- LogParser Checks - QueryFrom parameter. Refer to the LogParser 
         help installed with LogParser for info on writing queries. This param 
         should just contain the FROM part onwards, the SELECT COUNT(*) is 
         automatically prefixed to the query-->
        
    <component id="EventLogUSER32Config" lifestyle="singleton" type="MonitorWang.Contrib.Checks.LogParser.EVTLogParserCheckConfig, MonitorWang.Contrib.Checks.LogParser">
      <parameters>
        <!-- 
        ===== true/false properties =====
        FullText
        ResolveSIDs
        FormatMsg
        FullEventCode
        ===== string properties =====
        BinaryFormat = ASC | PRINT | HEX
        CheckpointFile = checkpoint filename, eg:C:\Temp\myCheckpoint.lpc 
        StringsSep = any string, separator between values of the "Strings" field
        MsgErrorMode = NULL | ERROR | MSG
        Direction = FW | BW
        -->        
        <FromQuery>FROM System WHERE SourceName='USER32'</FromQuery>
        <InterpretZeroRowsAsAFailure>false</InterpretZeroRowsAsAFailure>
        <PublishOnlyIfFailure>true</PublishOnlyIfFailure>
        <FriendlyId>EventLogUSER32</FriendlyId>
        <Enabled>false</Enabled>
      </parameters>
    </component>


    <component id="IISMainWebSite404CheckConfig" lifestyle="singleton" type="MonitorWang.Contrib.Checks.LogParser.IISLogParserCheckConfig, MonitorWang.Contrib.Checks.LogParser">
      <parameters>
        <!--
        CodePage = number, default = -2, 0 = system; eg:1245
        Recurse = recursion level. 0 = disabled,  -1 = unlimited
        MinDateMod = Minimum file last modified date, in local time coordinates; eg: date/time (in "yyyy-MM-dd hh:mm:ss" format)
        Locale = 3-character locale ID, ID of the locale in which the log file was generated.
        CheckpointFile = checkpoint filename, eg:C:\Temp\myCheckpoint.lpc 
        -->        
        <FromQuery>FROM &lt;1&gt; WHERE StatusCode=404</FromQuery>
        <InterpretZeroRowsAsAFailure>false</InterpretZeroRowsAsAFailure>
        <PublishOnlyIfFailure>true</PublishOnlyIfFailure>
        <FriendlyId>IISMainWebSite404Check</FriendlyId>
        <Enabled>false</Enabled>
      </parameters>
    </component>


    <component id="IISW3CMainWebSite404CheckConfig" lifestyle="singleton" type="MonitorWang.Contrib.Checks.LogParser.IISW3CLogParserCheckConfig, MonitorWang.Contrib.Checks.LogParser">
      <parameters>
        <!--
        CodePage = number, default = -2, 0 = system; eg:1245
        Recurse = recursion level. 0 = disabled,  -1 = unlimited
        DoubleQuotes = Specifies that string values in the log are double-quoted.
        DirTime = Use the value of the "#Date" directive for the "date" and/or "time" field values when these fields are not logged
        ConsolidateLogs = Return entries from all the input log files ordering by date and time.
        MinDateMod = Minimum file last modified date, in local time coordinates; eg: date/time (in "yyyy-MM-dd hh:mm:ss" format)
        CheckpointFile = checkpoint filename, eg:C:\Temp\myCheckpoint.lpc 
        -->
        
        <FromQuery>FROM &lt;1&gt; WHERE sc-status=404</FromQuery>
        <InterpretZeroRowsAsAFailure>false</InterpretZeroRowsAsAFailure>
        <PublishOnlyIfFailure>true</PublishOnlyIfFailure>
        <FriendlyId>IISW3CMainWebSite404Check</FriendlyId>
        <Enabled>false</Enabled>
      </parameters>
    </component>


    <component id="TextLineMonitorWangLogErrorCheckConfig" lifestyle="singleton" type="MonitorWang.Contrib.Checks.LogParser.TextLineLogParserCheckConfig, MonitorWang.Contrib.Checks.LogParser">
      <parameters>
        <!--
        CodePage = number, default = 0 (system cp); eg:1245
        Recurse = recursion level. 0 = disabled,  -1 = unlimited
        SplitLongLines = (bool) Split lines when longer than maximum allowed (128k/line).
        CheckpointFile = checkpoint filename, eg:C:\Temp\myCheckpoint.lpc 
        -->
        
        <FromQuery>FROM monitorwang.log WHERE Text like '%MonitorWang System Failure%'</FromQuery>
        <InterpretZeroRowsAsAFailure>false</InterpretZeroRowsAsAFailure>
        <PublishOnlyIfFailure>true</PublishOnlyIfFailure>
        <FriendlyId>MonitoringTheMonitor</FriendlyId>
        <Enabled>false</Enabled>
      </parameters>
    </component>


    <component id="CSVTestCheckConfig" lifestyle="singleton" type="MonitorWang.Contrib.Checks.LogParser.CSVLogParserCheckConfig, MonitorWang.Contrib.Checks.LogParser">
      <parameters>
        <!--
        HeaderRow = bool, Specifies whether or not the input CSV file(s) begin with a header line.
        HeaderFile = string, File containing field names.
        FixedFields = bool, Specifies whether or not all the records in the input CSV file(s) have a fixed number of fields.
        Fields = int, Number of fields in the CSV data records.
        Lines = int, Number of lines examined to determine number of fields and field types at run time.
        DoubleQuotes = string, valid values are "Auto" (default) and "Ignore"
        SkipLines = int, Number of initial lines to skip.
        Comment = string, Skip lines beginning with this string.
        TimestampFormat = string, Format of timestamp values in the input CSV data, default = "yyyy-MM-dd hh:mm:ss"
        CodePage = number, default = 0 (system cp); eg:1245
        CheckpointFile = checkpoint filename, eg:C:\Temp\myCheckpoint.lpc 
        -->        
        <FromQuery>FROM ..\..\..\testdata\LogParserTest.csv WHERE Name LIKE '%CSV%'</FromQuery>
        <InterpretZeroRowsAsAFailure>false</InterpretZeroRowsAsAFailure>
        <PublishOnlyIfFailure>true</PublishOnlyIfFailure>
        <FriendlyId>CSVRelatedSourceCodeFiles</FriendlyId>
        <Enabled>false</Enabled>
      </parameters>
    </component>


    <component id="FSLogFileExistsCheckConfig" lifestyle="singleton" type="MonitorWang.Contrib.Checks.LogParser.FSLogParserCheckConfig, MonitorWang.Contrib.Checks.LogParser">
      <parameters>
        <!--
        PreserveLastAccTime = bool, Preserve the last access time of visited files.
        UseLocalTime = bool, Use local time for timestamp fields.
        Recurse = recursion level. 0 = disabled,  -1 = unlimited
        -->        
        <FromQuery>FROM *.* WHERE Name = 'monitorwang.log' AND Size > 100</FromQuery>
        <InterpretZeroRowsAsAFailure>false</InterpretZeroRowsAsAFailure>
        <PublishOnlyIfFailure>true</PublishOnlyIfFailure>
        <FriendlyId>MonitorWangLogFileHasGrownCheck</FriendlyId>
        <Enabled>false</Enabled>
      </parameters>
    </component>


    <component id="REGMonitorWangInstalledCheckConfig" lifestyle="singleton" type="MonitorWang.Contrib.Checks.LogParser.REGLogParserCheckConfig, MonitorWang.Contrib.Checks.LogParser">
      <parameters>
        <!--
        MultiSZSep = string, default = "|". Separator between elements of MULTI_SZ registry values.
        Recurse = int, recursion level. 0 = disabled,  -1 = unlimited
        BinaryFormat = string, Valid values are "ASC" (default), "HEX", "PRINT"
        -->        
        <FromQuery>FROM HKLM\SYSTEM\CurrentControlSet\Services WHERE KeyName = 'MonitorWangAgent'</FromQuery>
        <InterpretZeroRowsAsAFailure>true</InterpretZeroRowsAsAFailure>
        <PublishOnlyIfFailure>true</PublishOnlyIfFailure>
        <FriendlyId>MonitorWangInstalledAsService</FriendlyId>
        <Enabled>false</Enabled>
      </parameters>
    </component>


    <component id="TSVTestCheckConfig" lifestyle="singleton" type="MonitorWang.Contrib.Checks.LogParser.TSVLogParserCheckConfig, MonitorWang.Contrib.Checks.LogParser">
      <parameters>
        <!--       
        FixedSeparator = bool, Specifies whether or not the fields in the input TSV file(s) are separated by a fixed number of separator characters.
        Separator = string, a single character | spaces | space | tab
        NumberOfSeparators = int, Number of separator characters between fields in the data records        
        HeaderRow = bool, Specifies whether or not the input CSV file(s) begin with a header line.
        HeaderFile = string, File containing field names.
        Fields = int, Number of fields in the CSV data records.
        Lines = int, Number of lines examined to determine number of fields and field types at run time.
        SkipLines = int, Number of initial lines to skip.
        LineFilter = string, 
        CodePage = number, default = 0 (system cp); eg:1245
        TimestampFormat = string, Format of timestamp values in the input CSV data, default = "yyyy-MM-dd hh:mm:ss"        
        CheckpointFile = checkpoint filename, eg:C:\Temp\myCheckpoint.lpc 
        -->
        <FromQuery>FROM ..\..\..\testdata\LogParserTest.txt WHERE Name LIKE '%LogParser%'</FromQuery>
        <InterpretZeroRowsAsAFailure>false</InterpretZeroRowsAsAFailure>
        <PublishOnlyIfFailure>true</PublishOnlyIfFailure>
        <FriendlyId>TSVLogParserRelatedFiles</FriendlyId>
        <Enabled>false</Enabled>
      </parameters>
    </component>


    <component id="URLSCANCheckConfig" lifestyle="singleton" type="MonitorWang.Contrib.Checks.LogParser.URLSCANLogParserCheckConfig, MonitorWang.Contrib.Checks.LogParser">
      <parameters>
        <!--       
        CheckpointFile = checkpoint filename, eg:C:\Temp\myCheckpoint.lpc 
        -->
        <FromQuery>FROM URLSCAN WHERE ClientIP LIKE '10.%'</FromQuery>
        <InterpretZeroRowsAsAFailure>false</InterpretZeroRowsAsAFailure>
        <PublishOnlyIfFailure>true</PublishOnlyIfFailure>
        <FriendlyId>TSVLogParserRelatedFiles</FriendlyId>
        <Enabled>false</Enabled>
      </parameters>
    </component>


    <component id="W3CFirewallDroppedPacketsCheckConfig" lifestyle="singleton" type="MonitorWang.Contrib.Checks.LogParser.W3CLogParserCheckConfig, MonitorWang.Contrib.Checks.LogParser">
      <parameters>
        <!--
        Lines = int, Number of lines examined to determine number of fields and field types at run time.
        DoubleQuoted = bool, valid values are "Auto" (default) and "Ignore"
        CodePage = number, default = 0 (system cp); eg:1245
        Separator = string, a single character | space | tab | auto 
        -->
        <FromQuery>FROM pfirewall.log WHERE action='DROP'</FromQuery>
        <InterpretZeroRowsAsAFailure>false</InterpretZeroRowsAsAFailure>
        <PublishOnlyIfFailure>true</PublishOnlyIfFailure>
        <FriendlyId>W3CFirewallDroppedPackets</FriendlyId>
        <Enabled>false</Enabled>
      </parameters>
    </component>


    <component id="XMLCheckIsEnabledCheckConfig" lifestyle="singleton" type="MonitorWang.Contrib.Checks.LogParser.XMLLogParserCheckConfig, MonitorWang.Contrib.Checks.LogParser">
      <parameters>
        <!--
        RootXPath = string, XPath query of document node(s) to be considered root node(s).
        fMode = string, valid values Branch | Tree | Node | Auto. Algorithm to use when visiting the document nodes.
        TimestampFormat = string, Format of timestamp values in the document.
        NumberOfLeafNodes = int, Number of leaf nodes to be examined when determining the document structure.
        FieldNames = string, Field naming schema.
        -->
        <FromQuery>FROM http://jimblogdog.blogspot.com/feeds/posts/default WHERE title2 LIKE '%monitorwang%'</FromQuery>
        <InterpretZeroRowsAsAFailure>true</InterpretZeroRowsAsAFailure>
        <PublishOnlyIfFailure>false</PublishOnlyIfFailure>
        <FriendlyId>MonitorWangBlogPosts</FriendlyId>
        <Enabled>false</Enabled>
      </parameters>
    </component>

  </components>
</configuration>